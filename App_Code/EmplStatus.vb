'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.4016
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection

Namespace ESBdb
	
	<System.Data.Linq.Mapping.DatabaseAttribute(Name:="employeestatus")>  _
	Partial Public Class GeneratedDataContext
		Inherits System.Data.Linq.DataContext
		
		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub InsertAudit_CHANGE_TYPES(instance As Audit_CHANGE_TYPES)
    End Sub
    Partial Private Sub UpdateAudit_CHANGE_TYPES(instance As Audit_CHANGE_TYPES)
    End Sub
    Partial Private Sub DeleteAudit_CHANGE_TYPES(instance As Audit_CHANGE_TYPES)
    End Sub
    Partial Private Sub InsertAudit_EMPLOYEE_CHANGES(instance As Audit_EMPLOYEE_CHANGES)
    End Sub
    Partial Private Sub UpdateAudit_EMPLOYEE_CHANGES(instance As Audit_EMPLOYEE_CHANGES)
    End Sub
    Partial Private Sub DeleteAudit_EMPLOYEE_CHANGES(instance As Audit_EMPLOYEE_CHANGES)
    End Sub
    Partial Private Sub InsertEMPLOYEES(instance As EMPLOYEES)
    End Sub
    Partial Private Sub UpdateEMPLOYEES(instance As EMPLOYEES)
    End Sub
    Partial Private Sub DeleteEMPLOYEES(instance As EMPLOYEES)
    End Sub
    Partial Private Sub InsertLOCATIONS(instance As LOCATIONS)
    End Sub
    Partial Private Sub UpdateLOCATIONS(instance As LOCATIONS)
    End Sub
    Partial Private Sub DeleteLOCATIONS(instance As LOCATIONS)
    End Sub
    Partial Private Sub InsertORGANIZATIONS(instance As ORGANIZATIONS)
    End Sub
    Partial Private Sub UpdateORGANIZATIONS(instance As ORGANIZATIONS)
    End Sub
    Partial Private Sub DeleteORGANIZATIONS(instance As ORGANIZATIONS)
    End Sub
    Partial Private Sub InsertPHOTOS(instance As PHOTOS)
    End Sub
    Partial Private Sub UpdatePHOTOS(instance As PHOTOS)
    End Sub
    Partial Private Sub DeletePHOTOS(instance As PHOTOS)
    End Sub
    Partial Private Sub InsertPUNCHES(instance As PUNCHES)
    End Sub
    Partial Private Sub UpdatePUNCHES(instance As PUNCHES)
    End Sub
    Partial Private Sub DeletePUNCHES(instance As PUNCHES)
    End Sub
    Partial Private Sub InsertPUNCHTYPES(instance As PUNCHTYPES)
    End Sub
    Partial Private Sub UpdatePUNCHTYPES(instance As PUNCHTYPES)
    End Sub
    Partial Private Sub DeletePUNCHTYPES(instance As PUNCHTYPES)
    End Sub
    #End Region
		
		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated
		End Sub
		
		Public ReadOnly Property Audit_CHANGE_TYPES() As System.Data.Linq.Table(Of Audit_CHANGE_TYPES)
			Get
				Return Me.GetTable(Of Audit_CHANGE_TYPES)
			End Get
		End Property
		
		Public ReadOnly Property Audit_EMPLOYEE_CHANGES() As System.Data.Linq.Table(Of Audit_EMPLOYEE_CHANGES)
			Get
				Return Me.GetTable(Of Audit_EMPLOYEE_CHANGES)
			End Get
		End Property
		
		Public ReadOnly Property Audit_EmployeeDeletion() As System.Data.Linq.Table(Of Audit_EmployeeDeletion)
			Get
				Return Me.GetTable(Of Audit_EmployeeDeletion)
			End Get
		End Property
		
		Public ReadOnly Property EmployeeInOutHistory() As System.Data.Linq.Table(Of EmployeeInOutHistory)
			Get
				Return Me.GetTable(Of EmployeeInOutHistory)
			End Get
		End Property
		
		Public ReadOnly Property Audit_EmployeeInserts() As System.Data.Linq.Table(Of Audit_EmployeeInserts)
			Get
				Return Me.GetTable(Of Audit_EmployeeInserts)
			End Get
		End Property
		
		Public ReadOnly Property EMPLOYEES() As System.Data.Linq.Table(Of EMPLOYEES)
			Get
				Return Me.GetTable(Of EMPLOYEES)
			End Get
		End Property
		
		Public ReadOnly Property EmployeesAdminView() As System.Data.Linq.Table(Of EmployeesAdminView)
			Get
				Return Me.GetTable(Of EmployeesAdminView)
			End Get
		End Property
		
		Public ReadOnly Property Audit_EmployeeUpdate() As System.Data.Linq.Table(Of Audit_EmployeeUpdate)
			Get
				Return Me.GetTable(Of Audit_EmployeeUpdate)
			End Get
		End Property
		
		Public ReadOnly Property LOCATIONS() As System.Data.Linq.Table(Of LOCATIONS)
			Get
				Return Me.GetTable(Of LOCATIONS)
			End Get
		End Property
		
		Public ReadOnly Property MostRecentActivity() As System.Data.Linq.Table(Of MostRecentActivity)
			Get
				Return Me.GetTable(Of MostRecentActivity)
			End Get
		End Property
		
		Public ReadOnly Property ORGANIZATIONS() As System.Data.Linq.Table(Of ORGANIZATIONS)
			Get
				Return Me.GetTable(Of ORGANIZATIONS)
			End Get
		End Property
		
		Public ReadOnly Property PHOTOS() As System.Data.Linq.Table(Of PHOTOS)
			Get
				Return Me.GetTable(Of PHOTOS)
			End Get
		End Property
		
		Public ReadOnly Property PUNCHES() As System.Data.Linq.Table(Of PUNCHES)
			Get
				Return Me.GetTable(Of PUNCHES)
			End Get
		End Property
		
		Public ReadOnly Property Audit_PUNCHES_DELETED() As System.Data.Linq.Table(Of Audit_PUNCHES_DELETED)
			Get
				Return Me.GetTable(Of Audit_PUNCHES_DELETED)
			End Get
		End Property
		
		Public ReadOnly Property PUNCHTYPES() As System.Data.Linq.Table(Of PUNCHTYPES)
			Get
				Return Me.GetTable(Of PUNCHTYPES)
			End Get
		End Property
		
		<FunctionAttribute(Name:="dbo.DateTimeToTicks", IsComposable:=true)>  _
		Public Function DateTimeToTicks(<Parameter(DbType:="DateTime")> ByVal d As System.Nullable(Of Date)) As <Parameter(DbType:="BigInt")> System.Nullable(Of Long)
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), d).ReturnValue,System.Nullable(Of Long))
		End Function
		
		<FunctionAttribute(Name:="dbo.DateToTicks", IsComposable:=true)>  _
		Public Function DateToTicks(<Parameter(DbType:="Int")> ByVal year As System.Nullable(Of Integer), <Parameter(DbType:="Int")> ByVal month As System.Nullable(Of Integer), <Parameter(DbType:="Int")> ByVal day As System.Nullable(Of Integer)) As <Parameter(DbType:="BigInt")> System.Nullable(Of Long)
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), year, month, day).ReturnValue,System.Nullable(Of Long))
		End Function
		
		<FunctionAttribute(Name:="dbo.DELETE_EMPLOYEE")>  _
		Public Function DELETE_EMPLOYEE(<Parameter(DbType:="SmallInt")> ByVal employeeID As System.Nullable(Of Short), <Parameter(DbType:="VarChar(15)")> ByVal remoteIP As String) As <Parameter(DbType:="Int")> Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), employeeID, remoteIP)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<FunctionAttribute(Name:="dbo.DELETE_EMPLOYEE_PHOTO")>  _
		Public Function DELETE_EMPLOYEE_PHOTO(<Parameter(DbType:="SmallInt")> ByVal employeeID As System.Nullable(Of Short)) As <Parameter(DbType:="Int")> Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), employeeID)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<FunctionAttribute(Name:="dbo.fn_diagramobjects", IsComposable:=true)>  _
		Public Function Fn_diagramobjects() As <Parameter(DbType:="Int")> System.Nullable(Of Integer)
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo)).ReturnValue,System.Nullable(Of Integer))
		End Function
		
		<FunctionAttribute(Name:="dbo.INSERT_EMPLOYEE")>  _
		Public Function INSERT_EMPLOYEE(<Parameter(DbType:="NVarChar(100)")> ByVal fullname As String, <Parameter(DbType:="TinyInt")> ByVal locationID As System.Nullable(Of Byte), <Parameter(DbType:="TinyInt")> ByVal organizationID As System.Nullable(Of Byte), <Parameter(DbType:="VarChar(32)")> ByVal phone_number As String, <Parameter(DbType:="VarChar(15)")> ByVal remoteIP As String) As <Parameter(DbType:="Int")> Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fullname, locationID, organizationID, phone_number, remoteIP)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<FunctionAttribute(Name:="dbo.INSERT_EMPLOYEE_PUNCH")>  _
		Public Function INSERT_EMPLOYEE_PUNCH(<Parameter(DbType:="SmallInt")> ByVal employeeID As System.Nullable(Of Short), <Parameter(DbType:="TinyInt")> ByVal punchtype As System.Nullable(Of Byte), <Parameter(DbType:="DateTime")> ByVal punched_utc As System.Nullable(Of Date), <Parameter(DbType:="SmallInt")> ByVal utc_hours_offset As System.Nullable(Of Short), <Parameter(DbType:="BigInt")> ByVal ticks_timestamp As System.Nullable(Of Long), <Parameter(Name:="IP_address", DbType:="VarChar(15)")> ByVal iP_address As String, <Parameter(DbType:="NVarChar(65)")> ByVal comment_text As String, <Parameter(DbType:="NVarChar(25)")> ByVal return_text As String) As <Parameter(DbType:="Int")> Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), employeeID, punchtype, punched_utc, utc_hours_offset, ticks_timestamp, iP_address, comment_text, return_text)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<FunctionAttribute(Name:="dbo.MonthToDays", IsComposable:=true)>  _
		Public Function MonthToDays(<Parameter(DbType:="Int")> ByVal year As System.Nullable(Of Integer), <Parameter(DbType:="Int")> ByVal month As System.Nullable(Of Integer)) As <Parameter(DbType:="Int")> System.Nullable(Of Integer)
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), year, month).ReturnValue,System.Nullable(Of Integer))
		End Function
		
		<FunctionAttribute(Name:="dbo.MonthToDays365", IsComposable:=true)>  _
		Public Function MonthToDays365(<Parameter(DbType:="Int")> ByVal month As System.Nullable(Of Integer)) As <Parameter(DbType:="Int")> System.Nullable(Of Integer)
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), month).ReturnValue,System.Nullable(Of Integer))
		End Function
		
		<FunctionAttribute(Name:="dbo.MonthToDays366", IsComposable:=true)>  _
		Public Function MonthToDays366(<Parameter(DbType:="Int")> ByVal month As System.Nullable(Of Integer)) As <Parameter(DbType:="Int")> System.Nullable(Of Integer)
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), month).ReturnValue,System.Nullable(Of Integer))
		End Function
		
		<FunctionAttribute(Name:="dbo.SET_EMPLOYEE_PHOTO")>  _
		Public Function SET_EMPLOYEE_PHOTO(<Parameter(DbType:="SmallInt")> ByVal employeeID As System.Nullable(Of Short), <Parameter(DbType:="Image")> ByVal original_file As System.Data.Linq.Binary, <Parameter(DbType:="VarChar(32)")> ByVal md5_original_file As String) As <Parameter(DbType:="Int")> Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), employeeID, original_file, md5_original_file)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<FunctionAttribute(Name:="dbo.sp_alterdiagram")>  _
		Public Function Sp_alterdiagram(<Parameter(DbType:="NVarChar(128)")> ByVal diagramname As String, <Parameter(DbType:="Int")> ByVal owner_id As System.Nullable(Of Integer), <Parameter(DbType:="Int")> ByVal version As System.Nullable(Of Integer), <Parameter(DbType:="VarBinary(MAX)")> ByVal definition As System.Data.Linq.Binary) As <Parameter(DbType:="Int")> Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), diagramname, owner_id, version, definition)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<FunctionAttribute(Name:="dbo.sp_creatediagram")>  _
		Public Function Sp_creatediagram(<Parameter(DbType:="NVarChar(128)")> ByVal diagramname As String, <Parameter(DbType:="Int")> ByVal owner_id As System.Nullable(Of Integer), <Parameter(DbType:="Int")> ByVal version As System.Nullable(Of Integer), <Parameter(DbType:="VarBinary(MAX)")> ByVal definition As System.Data.Linq.Binary) As <Parameter(DbType:="Int")> Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), diagramname, owner_id, version, definition)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<FunctionAttribute(Name:="dbo.sp_dropdiagram")>  _
		Public Function Sp_dropdiagram(<Parameter(DbType:="NVarChar(128)")> ByVal diagramname As String, <Parameter(DbType:="Int")> ByVal owner_id As System.Nullable(Of Integer)) As <Parameter(DbType:="Int")> Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), diagramname, owner_id)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<FunctionAttribute(Name:="dbo.sp_helpdiagramdefinition")>  _
		Public Function Sp_helpdiagramdefinition(<Parameter(DbType:="NVarChar(128)")> ByVal diagramname As String, <Parameter(DbType:="Int")> ByVal owner_id As System.Nullable(Of Integer)) As ISingleResult(Of Sp_helpdiagramdefinitionResult)
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), diagramname, owner_id)
			Return CType(result.ReturnValue,ISingleResult(Of Sp_helpdiagramdefinitionResult))
		End Function
		
		<FunctionAttribute(Name:="dbo.sp_helpdiagrams")>  _
		Public Function Sp_helpdiagrams(<Parameter(DbType:="NVarChar(128)")> ByVal diagramname As String, <Parameter(DbType:="Int")> ByVal owner_id As System.Nullable(Of Integer)) As ISingleResult(Of Sp_helpdiagramsResult)
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), diagramname, owner_id)
			Return CType(result.ReturnValue,ISingleResult(Of Sp_helpdiagramsResult))
		End Function
		
		<FunctionAttribute(Name:="dbo.sp_renamediagram")>  _
		Public Function Sp_renamediagram(<Parameter(DbType:="NVarChar(128)")> ByVal diagramname As String, <Parameter(DbType:="Int")> ByVal owner_id As System.Nullable(Of Integer), <Parameter(DbType:="NVarChar(128)")> ByVal new_diagramname As String) As <Parameter(DbType:="Int")> Integer
			Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), diagramname, owner_id, new_diagramname)
			Return CType(result.ReturnValue,Integer)
		End Function
		
		<FunctionAttribute(Name:="dbo.TicksToDateTime", IsComposable:=true)>  _
		Public Function TicksToDateTime(<Parameter(Name:="Ticks", DbType:="BigInt")> ByVal ticks As System.Nullable(Of Long)) As <Parameter(DbType:="DateTime")> System.Nullable(Of Date)
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), ticks).ReturnValue,System.Nullable(Of Date))
		End Function
		
		<FunctionAttribute(Name:="dbo.TimeToTicks", IsComposable:=true)>  _
		Public Function TimeToTicks(<Parameter(DbType:="Int")> ByVal hour As System.Nullable(Of Integer), <Parameter(DbType:="Int")> ByVal minute As System.Nullable(Of Integer), <Parameter(DbType:="Int")> ByVal second As System.Nullable(Of Integer)) As <Parameter(DbType:="BigInt")> System.Nullable(Of Long)
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), hour, minute, second).ReturnValue,System.Nullable(Of Long))
		End Function
		
		<FunctionAttribute(Name:="dbo.varbintohexsubstring", IsComposable:=true)>  _
		Public Function Varbintohexsubstring(<Parameter(DbType:="Bit")> ByVal fsetprefix As System.Nullable(Of Boolean), <Parameter(DbType:="VarBinary(8000)")> ByVal pbinin As System.Data.Linq.Binary, <Parameter(DbType:="Int")> ByVal startoffset As System.Nullable(Of Integer), <Parameter(DbType:="Int")> ByVal cbytesin As System.Nullable(Of Integer)) As <Parameter(DbType:="NVarChar(4000)")> String
			Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fsetprefix, pbinin, startoffset, cbytesin).ReturnValue,String)
		End Function
	End Class
	
	<Table(Name:="audit.CHANGE_TYPES")>  _
	Partial Public Class Audit_CHANGE_TYPES
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Byte
		
		Private _Description As String
		
		Private _Audit_EMPLOYEE_CHANGES As EntitySet(Of Audit_EMPLOYEE_CHANGES)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Byte)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Audit_EMPLOYEE_CHANGES = New EntitySet(Of Audit_EMPLOYEE_CHANGES)(AddressOf Me.attach_Audit_EMPLOYEE_CHANGES, AddressOf Me.detach_Audit_EMPLOYEE_CHANGES)
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
		Public Property ID() As Byte
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="description", Storage:="_Description", DbType:="VarChar(64) NOT NULL", CanBeNull:=false)>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Association(Name:="FK_EMPLOYEES_CHANGE_TYPES", Storage:="_Audit_EMPLOYEE_CHANGES", ThisKey:="ID", OtherKey:="Change_type", DeleteRule:="NO ACTION")>  _
		Public Property Audit_EMPLOYEE_CHANGES() As EntitySet(Of Audit_EMPLOYEE_CHANGES)
			Get
				Return Me._Audit_EMPLOYEE_CHANGES
			End Get
			Set
				Me._Audit_EMPLOYEE_CHANGES.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_Audit_EMPLOYEE_CHANGES(ByVal entity As Audit_EMPLOYEE_CHANGES)
			Me.SendPropertyChanging
			entity.Audit_CHANGE_TYPES = Me
		End Sub
		
		Private Sub detach_Audit_EMPLOYEE_CHANGES(ByVal entity As Audit_EMPLOYEE_CHANGES)
			Me.SendPropertyChanging
			entity.Audit_CHANGE_TYPES = Nothing
		End Sub
	End Class
	
	<Table(Name:="audit.EMPLOYEE_CHANGES")>  _
	Partial Public Class Audit_EMPLOYEE_CHANGES
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Long
		
		Private _Changemaker_type As Byte
		
		Private _Change_type As Byte
		
		Private _Change_when As Date
		
		Private _Change_remoteIP As String
		
		Private _EmployeeID As Short
		
		Private _Fullname As String
		
		Private _Phone_number As String
		
		Private _Skype_username As String
		
		Private _Email As String
		
		Private _Position_title As String
		
		Private _Audit_CHANGE_TYPES As EntityRef(Of Audit_CHANGE_TYPES)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnChangemaker_typeChanging(value As Byte)
    End Sub
    Partial Private Sub OnChangemaker_typeChanged()
    End Sub
    Partial Private Sub OnChange_typeChanging(value As Byte)
    End Sub
    Partial Private Sub OnChange_typeChanged()
    End Sub
    Partial Private Sub OnChange_whenChanging(value As Date)
    End Sub
    Partial Private Sub OnChange_whenChanged()
    End Sub
    Partial Private Sub OnChange_remoteIPChanging(value As String)
    End Sub
    Partial Private Sub OnChange_remoteIPChanged()
    End Sub
    Partial Private Sub OnEmployeeIDChanging(value As Short)
    End Sub
    Partial Private Sub OnEmployeeIDChanged()
    End Sub
    Partial Private Sub OnFullnameChanging(value As String)
    End Sub
    Partial Private Sub OnFullnameChanged()
    End Sub
    Partial Private Sub OnPhone_numberChanging(value As String)
    End Sub
    Partial Private Sub OnPhone_numberChanged()
    End Sub
    Partial Private Sub OnSkype_usernameChanging(value As String)
    End Sub
    Partial Private Sub OnSkype_usernameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPosition_titleChanging(value As String)
    End Sub
    Partial Private Sub OnPosition_titleChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._Audit_CHANGE_TYPES = CType(Nothing, EntityRef(Of Audit_CHANGE_TYPES))
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Long
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="changemaker_type", Storage:="_Changemaker_type", DbType:="TinyInt NOT NULL")>  _
		Public Property Changemaker_type() As Byte
			Get
				Return Me._Changemaker_type
			End Get
			Set
				If ((Me._Changemaker_type = value)  _
							= false) Then
					Me.OnChangemaker_typeChanging(value)
					Me.SendPropertyChanging
					Me._Changemaker_type = value
					Me.SendPropertyChanged("Changemaker_type")
					Me.OnChangemaker_typeChanged
				End If
			End Set
		End Property
		
		<Column(Name:="change_type", Storage:="_Change_type", DbType:="TinyInt NOT NULL")>  _
		Public Property Change_type() As Byte
			Get
				Return Me._Change_type
			End Get
			Set
				If ((Me._Change_type = value)  _
							= false) Then
					Me.OnChange_typeChanging(value)
					Me.SendPropertyChanging
					Me._Change_type = value
					Me.SendPropertyChanged("Change_type")
					Me.OnChange_typeChanged
				End If
			End Set
		End Property
		
		<Column(Name:="change_when", Storage:="_Change_when", DbType:="DateTime NOT NULL")>  _
		Public Property Change_when() As Date
			Get
				Return Me._Change_when
			End Get
			Set
				If ((Me._Change_when = value)  _
							= false) Then
					Me.OnChange_whenChanging(value)
					Me.SendPropertyChanging
					Me._Change_when = value
					Me.SendPropertyChanged("Change_when")
					Me.OnChange_whenChanged
				End If
			End Set
		End Property
		
		<Column(Name:="change_remoteIP", Storage:="_Change_remoteIP", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
		Public Property Change_remoteIP() As String
			Get
				Return Me._Change_remoteIP
			End Get
			Set
				If (String.Equals(Me._Change_remoteIP, value) = false) Then
					Me.OnChange_remoteIPChanging(value)
					Me.SendPropertyChanging
					Me._Change_remoteIP = value
					Me.SendPropertyChanged("Change_remoteIP")
					Me.OnChange_remoteIPChanged
				End If
			End Set
		End Property
		
		<Column(Name:="employeeID", Storage:="_EmployeeID", DbType:="SmallInt NOT NULL")>  _
		Public Property EmployeeID() As Short
			Get
				Return Me._EmployeeID
			End Get
			Set
				If ((Me._EmployeeID = value)  _
							= false) Then
					Me.OnEmployeeIDChanging(value)
					Me.SendPropertyChanging
					Me._EmployeeID = value
					Me.SendPropertyChanged("EmployeeID")
					Me.OnEmployeeIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="fullname", Storage:="_Fullname", DbType:="NVarChar(100)")>  _
		Public Property Fullname() As String
			Get
				Return Me._Fullname
			End Get
			Set
				If (String.Equals(Me._Fullname, value) = false) Then
					Me.OnFullnameChanging(value)
					Me.SendPropertyChanging
					Me._Fullname = value
					Me.SendPropertyChanged("Fullname")
					Me.OnFullnameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="phone_number", Storage:="_Phone_number", DbType:="VarChar(32)")>  _
		Public Property Phone_number() As String
			Get
				Return Me._Phone_number
			End Get
			Set
				If (String.Equals(Me._Phone_number, value) = false) Then
					Me.OnPhone_numberChanging(value)
					Me.SendPropertyChanging
					Me._Phone_number = value
					Me.SendPropertyChanged("Phone_number")
					Me.OnPhone_numberChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Skype_username", DbType:="VarChar(64)")>  _
		Public Property Skype_username() As String
			Get
				Return Me._Skype_username
			End Get
			Set
				If (String.Equals(Me._Skype_username, value) = false) Then
					Me.OnSkype_usernameChanging(value)
					Me.SendPropertyChanging
					Me._Skype_username = value
					Me.SendPropertyChanged("Skype_username")
					Me.OnSkype_usernameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="email", Storage:="_Email", DbType:="VarChar(100)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Column(Name:="position_title", Storage:="_Position_title", DbType:="NVarChar(50)")>  _
		Public Property Position_title() As String
			Get
				Return Me._Position_title
			End Get
			Set
				If (String.Equals(Me._Position_title, value) = false) Then
					Me.OnPosition_titleChanging(value)
					Me.SendPropertyChanging
					Me._Position_title = value
					Me.SendPropertyChanged("Position_title")
					Me.OnPosition_titleChanged
				End If
			End Set
		End Property
		
		<Association(Name:="FK_EMPLOYEES_CHANGE_TYPES", Storage:="_Audit_CHANGE_TYPES", ThisKey:="Change_type", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property Audit_CHANGE_TYPES() As Audit_CHANGE_TYPES
			Get
				Return Me._Audit_CHANGE_TYPES.Entity
			End Get
			Set
				Dim previousValue As Audit_CHANGE_TYPES = Me._Audit_CHANGE_TYPES.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._Audit_CHANGE_TYPES.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._Audit_CHANGE_TYPES.Entity = Nothing
						previousValue.Audit_EMPLOYEE_CHANGES.Remove(Me)
					End If
					Me._Audit_CHANGE_TYPES.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.Audit_EMPLOYEE_CHANGES.Add(Me)
						Me._Change_type = value.ID
					Else
						Me._Change_type = CType(Nothing, Byte)
					End If
					Me.SendPropertyChanged("Audit_CHANGE_TYPES")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="audit.EmployeeDeletion")>  _
	Partial Public Class Audit_EmployeeDeletion
		
		Private _Changemaker_type As Byte
		
		Private _Change_when As Date
		
		Private _Change_remoteIP As String
		
		Private _EmployeeID As Short
		
		Private _Fullname As String
		
		Private _Phone_number As String
		
		Private _Skype_username As String
		
		Private _Email As String
		
		Private _Position_title As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Column(Name:="changemaker_type", Storage:="_Changemaker_type", DbType:="TinyInt NOT NULL")>  _
		Public Property Changemaker_type() As Byte
			Get
				Return Me._Changemaker_type
			End Get
			Set
				If ((Me._Changemaker_type = value)  _
							= false) Then
					Me._Changemaker_type = value
				End If
			End Set
		End Property
		
		<Column(Name:="change_when", Storage:="_Change_when", DbType:="DateTime NOT NULL")>  _
		Public Property Change_when() As Date
			Get
				Return Me._Change_when
			End Get
			Set
				If ((Me._Change_when = value)  _
							= false) Then
					Me._Change_when = value
				End If
			End Set
		End Property
		
		<Column(Name:="change_remoteIP", Storage:="_Change_remoteIP", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
		Public Property Change_remoteIP() As String
			Get
				Return Me._Change_remoteIP
			End Get
			Set
				If (String.Equals(Me._Change_remoteIP, value) = false) Then
					Me._Change_remoteIP = value
				End If
			End Set
		End Property
		
		<Column(Name:="employeeID", Storage:="_EmployeeID", DbType:="SmallInt NOT NULL")>  _
		Public Property EmployeeID() As Short
			Get
				Return Me._EmployeeID
			End Get
			Set
				If ((Me._EmployeeID = value)  _
							= false) Then
					Me._EmployeeID = value
				End If
			End Set
		End Property
		
		<Column(Name:="fullname", Storage:="_Fullname", DbType:="NVarChar(100)")>  _
		Public Property Fullname() As String
			Get
				Return Me._Fullname
			End Get
			Set
				If (String.Equals(Me._Fullname, value) = false) Then
					Me._Fullname = value
				End If
			End Set
		End Property
		
		<Column(Name:="phone_number", Storage:="_Phone_number", DbType:="VarChar(32)")>  _
		Public Property Phone_number() As String
			Get
				Return Me._Phone_number
			End Get
			Set
				If (String.Equals(Me._Phone_number, value) = false) Then
					Me._Phone_number = value
				End If
			End Set
		End Property
		
		<Column(Storage:="_Skype_username", DbType:="VarChar(64)")>  _
		Public Property Skype_username() As String
			Get
				Return Me._Skype_username
			End Get
			Set
				If (String.Equals(Me._Skype_username, value) = false) Then
					Me._Skype_username = value
				End If
			End Set
		End Property
		
		<Column(Name:="email", Storage:="_Email", DbType:="VarChar(100)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me._Email = value
				End If
			End Set
		End Property
		
		<Column(Name:="position_title", Storage:="_Position_title", DbType:="NVarChar(50)")>  _
		Public Property Position_title() As String
			Get
				Return Me._Position_title
			End Get
			Set
				If (String.Equals(Me._Position_title, value) = false) Then
					Me._Position_title = value
				End If
			End Set
		End Property
	End Class
	
	<Table(Name:="dbo.EmployeeInOutHistory")>  _
	Partial Public Class EmployeeInOutHistory
		
		Private _EmployeeID As Short
		
		Private _When_punched As System.Nullable(Of Date)
		
		Private _Punchtype As Byte
		
		Private _Comment_text As String
		
		Private _Return_text As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Column(Name:="employeeID", Storage:="_EmployeeID", DbType:="SmallInt NOT NULL")>  _
		Public Property EmployeeID() As Short
			Get
				Return Me._EmployeeID
			End Get
			Set
				If ((Me._EmployeeID = value)  _
							= false) Then
					Me._EmployeeID = value
				End If
			End Set
		End Property
		
		<Column(Name:="when_punched", Storage:="_When_punched", DbType:="DateTime")>  _
		Public Property When_punched() As System.Nullable(Of Date)
			Get
				Return Me._When_punched
			End Get
			Set
				If (Me._When_punched.Equals(value) = false) Then
					Me._When_punched = value
				End If
			End Set
		End Property
		
		<Column(Name:="punchtype", Storage:="_Punchtype", DbType:="TinyInt NOT NULL")>  _
		Public Property Punchtype() As Byte
			Get
				Return Me._Punchtype
			End Get
			Set
				If ((Me._Punchtype = value)  _
							= false) Then
					Me._Punchtype = value
				End If
			End Set
		End Property
		
		<Column(Name:="comment_text", Storage:="_Comment_text", DbType:="NVarChar(65)")>  _
		Public Property Comment_text() As String
			Get
				Return Me._Comment_text
			End Get
			Set
				If (String.Equals(Me._Comment_text, value) = false) Then
					Me._Comment_text = value
				End If
			End Set
		End Property
		
		<Column(Name:="return_text", Storage:="_Return_text", DbType:="NVarChar(25)")>  _
		Public Property Return_text() As String
			Get
				Return Me._Return_text
			End Get
			Set
				If (String.Equals(Me._Return_text, value) = false) Then
					Me._Return_text = value
				End If
			End Set
		End Property
	End Class
	
	<Table(Name:="audit.EmployeeInserts")>  _
	Partial Public Class Audit_EmployeeInserts
		
		Private _Changemaker_type As Byte
		
		Private _Change_when As Date
		
		Private _Change_remoteIP As String
		
		Private _EmployeeID As Short
		
		Private _Fullname As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Column(Name:="changemaker_type", Storage:="_Changemaker_type", DbType:="TinyInt NOT NULL")>  _
		Public Property Changemaker_type() As Byte
			Get
				Return Me._Changemaker_type
			End Get
			Set
				If ((Me._Changemaker_type = value)  _
							= false) Then
					Me._Changemaker_type = value
				End If
			End Set
		End Property
		
		<Column(Name:="change_when", Storage:="_Change_when", DbType:="DateTime NOT NULL")>  _
		Public Property Change_when() As Date
			Get
				Return Me._Change_when
			End Get
			Set
				If ((Me._Change_when = value)  _
							= false) Then
					Me._Change_when = value
				End If
			End Set
		End Property
		
		<Column(Name:="change_remoteIP", Storage:="_Change_remoteIP", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
		Public Property Change_remoteIP() As String
			Get
				Return Me._Change_remoteIP
			End Get
			Set
				If (String.Equals(Me._Change_remoteIP, value) = false) Then
					Me._Change_remoteIP = value
				End If
			End Set
		End Property
		
		<Column(Name:="employeeID", Storage:="_EmployeeID", DbType:="SmallInt NOT NULL")>  _
		Public Property EmployeeID() As Short
			Get
				Return Me._EmployeeID
			End Get
			Set
				If ((Me._EmployeeID = value)  _
							= false) Then
					Me._EmployeeID = value
				End If
			End Set
		End Property
		
		<Column(Name:="fullname", Storage:="_Fullname", DbType:="NVarChar(100)")>  _
		Public Property Fullname() As String
			Get
				Return Me._Fullname
			End Get
			Set
				If (String.Equals(Me._Fullname, value) = false) Then
					Me._Fullname = value
				End If
			End Set
		End Property
	End Class
	
	<Table(Name:="dbo.EMPLOYEES")>  _
	Partial Public Class EMPLOYEES
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Short
		
		Private _Fullname As String
		
		Private _LocationID As Byte
		
		Private _OrganizationID As System.Nullable(Of Byte)
		
		Private _Production_status As Byte
		
		Private _Phone_number As String
		
		Private _Skype_username As String
		
		Private _Email As String
		
		Private _Position_title As String
		
		Private _LOCATIONS As EntityRef(Of LOCATIONS)
		
		Private _ORGANIZATIONS As EntityRef(Of ORGANIZATIONS)
		
		Private _PHOTOS As EntityRef(Of PHOTOS)
		
		Private _PUNCHES As EntitySet(Of PUNCHES)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Short)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFullnameChanging(value As String)
    End Sub
    Partial Private Sub OnFullnameChanged()
    End Sub
    Partial Private Sub OnLocationIDChanging(value As Byte)
    End Sub
    Partial Private Sub OnLocationIDChanged()
    End Sub
    Partial Private Sub OnOrganizationIDChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnOrganizationIDChanged()
    End Sub
    Partial Private Sub OnProduction_statusChanging(value As Byte)
    End Sub
    Partial Private Sub OnProduction_statusChanged()
    End Sub
    Partial Private Sub OnPhone_numberChanging(value As String)
    End Sub
    Partial Private Sub OnPhone_numberChanged()
    End Sub
    Partial Private Sub OnSkype_usernameChanging(value As String)
    End Sub
    Partial Private Sub OnSkype_usernameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPosition_titleChanging(value As String)
    End Sub
    Partial Private Sub OnPosition_titleChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._LOCATIONS = CType(Nothing, EntityRef(Of LOCATIONS))
			Me._ORGANIZATIONS = CType(Nothing, EntityRef(Of ORGANIZATIONS))
			Me._PHOTOS = CType(Nothing, EntityRef(Of PHOTOS))
			Me._PUNCHES = New EntitySet(Of PUNCHES)(AddressOf Me.attach_PUNCHES, AddressOf Me.detach_PUNCHES)
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="SmallInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
		Public Property ID() As Short
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="fullname", Storage:="_Fullname", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property Fullname() As String
			Get
				Return Me._Fullname
			End Get
			Set
				If (String.Equals(Me._Fullname, value) = false) Then
					Me.OnFullnameChanging(value)
					Me.SendPropertyChanging
					Me._Fullname = value
					Me.SendPropertyChanged("Fullname")
					Me.OnFullnameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="locationID", Storage:="_LocationID", DbType:="TinyInt NOT NULL")>  _
		Public Property LocationID() As Byte
			Get
				Return Me._LocationID
			End Get
			Set
				If ((Me._LocationID = value)  _
							= false) Then
					Me.OnLocationIDChanging(value)
					Me.SendPropertyChanging
					Me._LocationID = value
					Me.SendPropertyChanged("LocationID")
					Me.OnLocationIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="organizationID", Storage:="_OrganizationID", DbType:="TinyInt")>  _
		Public Property OrganizationID() As System.Nullable(Of Byte)
			Get
				Return Me._OrganizationID
			End Get
			Set
				If (Me._OrganizationID.Equals(value) = false) Then
					Me.OnOrganizationIDChanging(value)
					Me.SendPropertyChanging
					Me._OrganizationID = value
					Me.SendPropertyChanged("OrganizationID")
					Me.OnOrganizationIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="production_status", Storage:="_Production_status", DbType:="TinyInt NOT NULL")>  _
		Public Property Production_status() As Byte
			Get
				Return Me._Production_status
			End Get
			Set
				If ((Me._Production_status = value)  _
							= false) Then
					Me.OnProduction_statusChanging(value)
					Me.SendPropertyChanging
					Me._Production_status = value
					Me.SendPropertyChanged("Production_status")
					Me.OnProduction_statusChanged
				End If
			End Set
		End Property
		
		<Column(Name:="phone_number", Storage:="_Phone_number", DbType:="VarChar(32)")>  _
		Public Property Phone_number() As String
			Get
				Return Me._Phone_number
			End Get
			Set
				If (String.Equals(Me._Phone_number, value) = false) Then
					Me.OnPhone_numberChanging(value)
					Me.SendPropertyChanging
					Me._Phone_number = value
					Me.SendPropertyChanged("Phone_number")
					Me.OnPhone_numberChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_Skype_username", DbType:="VarChar(64)")>  _
		Public Property Skype_username() As String
			Get
				Return Me._Skype_username
			End Get
			Set
				If (String.Equals(Me._Skype_username, value) = false) Then
					Me.OnSkype_usernameChanging(value)
					Me.SendPropertyChanging
					Me._Skype_username = value
					Me.SendPropertyChanged("Skype_username")
					Me.OnSkype_usernameChanged
				End If
			End Set
		End Property
		
		<Column(Name:="email", Storage:="_Email", DbType:="VarChar(100)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me.OnEmailChanging(value)
					Me.SendPropertyChanging
					Me._Email = value
					Me.SendPropertyChanged("Email")
					Me.OnEmailChanged
				End If
			End Set
		End Property
		
		<Column(Name:="position_title", Storage:="_Position_title", DbType:="NVarChar(50)")>  _
		Public Property Position_title() As String
			Get
				Return Me._Position_title
			End Get
			Set
				If (String.Equals(Me._Position_title, value) = false) Then
					Me.OnPosition_titleChanging(value)
					Me.SendPropertyChanging
					Me._Position_title = value
					Me.SendPropertyChanged("Position_title")
					Me.OnPosition_titleChanged
				End If
			End Set
		End Property
		
		<Association(Name:="FK_EMPLOYEES_LOCATIONS", Storage:="_LOCATIONS", ThisKey:="LocationID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property LOCATIONS() As LOCATIONS
			Get
				Return Me._LOCATIONS.Entity
			End Get
			Set
				Dim previousValue As LOCATIONS = Me._LOCATIONS.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._LOCATIONS.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._LOCATIONS.Entity = Nothing
						previousValue.EMPLOYEES.Remove(Me)
					End If
					Me._LOCATIONS.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.EMPLOYEES.Add(Me)
						Me._LocationID = value.ID
					Else
						Me._LocationID = CType(Nothing, Byte)
					End If
					Me.SendPropertyChanged("LOCATIONS")
				End If
			End Set
		End Property
		
		<Association(Name:="FK_EMPLOYEES_ORGANIZATIONS", Storage:="_ORGANIZATIONS", ThisKey:="OrganizationID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property ORGANIZATIONS() As ORGANIZATIONS
			Get
				Return Me._ORGANIZATIONS.Entity
			End Get
			Set
				Dim previousValue As ORGANIZATIONS = Me._ORGANIZATIONS.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._ORGANIZATIONS.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._ORGANIZATIONS.Entity = Nothing
						previousValue.EMPLOYEES.Remove(Me)
					End If
					Me._ORGANIZATIONS.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.EMPLOYEES.Add(Me)
						Me._OrganizationID = value.ID
					Else
						Me._OrganizationID = CType(Nothing, Nullable(Of Byte))
					End If
					Me.SendPropertyChanged("ORGANIZATIONS")
				End If
			End Set
		End Property
		
		<Association(Name:="FK_JPEGS_EMPLOYEES", Storage:="_PHOTOS", ThisKey:="ID", OtherKey:="EmployeeID", IsUnique:=true, IsForeignKey:=false, DeleteRule:="NO ACTION")>  _
		Public Property PHOTOS() As PHOTOS
			Get
				Return Me._PHOTOS.Entity
			End Get
			Set
				Dim previousValue As PHOTOS = Me._PHOTOS.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._PHOTOS.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._PHOTOS.Entity = Nothing
						previousValue.EMPLOYEES = Nothing
					End If
					Me._PHOTOS.Entity = value
					If (Object.Equals(value, Nothing) = false) Then
						value.EMPLOYEES = Me
					End If
					Me.SendPropertyChanged("PHOTOS")
				End If
			End Set
		End Property
		
		<Association(Name:="FK_PUNCHES_EMPLOYEES", Storage:="_PUNCHES", ThisKey:="ID", OtherKey:="EmployeeID", DeleteRule:="NO ACTION")>  _
		Public Property PUNCHES() As EntitySet(Of PUNCHES)
			Get
				Return Me._PUNCHES
			End Get
			Set
				Me._PUNCHES.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_PUNCHES(ByVal entity As PUNCHES)
			Me.SendPropertyChanging
			entity.EMPLOYEES = Me
		End Sub
		
		Private Sub detach_PUNCHES(ByVal entity As PUNCHES)
			Me.SendPropertyChanging
			entity.EMPLOYEES = Nothing
		End Sub
	End Class
	
	<Table(Name:="dbo.EmployeesAdminView")>  _
	Partial Public Class EmployeesAdminView
		
		Private _ID As Short
		
		Private _Fullname As String
		
		Private _LocationID As Byte
		
		Private _Phone_number As String
		
		Private _Skype_username As String
		
		Private _Email As String
		
		Private _Position_title As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Column(Storage:="_ID", DbType:="SmallInt NOT NULL IDENTITY")>  _
		Public Property ID() As Short
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me._ID = value
				End If
			End Set
		End Property
		
		<Column(Name:="fullname", Storage:="_Fullname", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
		Public Property Fullname() As String
			Get
				Return Me._Fullname
			End Get
			Set
				If (String.Equals(Me._Fullname, value) = false) Then
					Me._Fullname = value
				End If
			End Set
		End Property
		
		<Column(Name:="locationID", Storage:="_LocationID", DbType:="TinyInt NOT NULL")>  _
		Public Property LocationID() As Byte
			Get
				Return Me._LocationID
			End Get
			Set
				If ((Me._LocationID = value)  _
							= false) Then
					Me._LocationID = value
				End If
			End Set
		End Property
		
		<Column(Name:="phone_number", Storage:="_Phone_number", DbType:="VarChar(32)")>  _
		Public Property Phone_number() As String
			Get
				Return Me._Phone_number
			End Get
			Set
				If (String.Equals(Me._Phone_number, value) = false) Then
					Me._Phone_number = value
				End If
			End Set
		End Property
		
		<Column(Storage:="_Skype_username", DbType:="VarChar(64)")>  _
		Public Property Skype_username() As String
			Get
				Return Me._Skype_username
			End Get
			Set
				If (String.Equals(Me._Skype_username, value) = false) Then
					Me._Skype_username = value
				End If
			End Set
		End Property
		
		<Column(Name:="email", Storage:="_Email", DbType:="VarChar(100)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me._Email = value
				End If
			End Set
		End Property
		
		<Column(Name:="position_title", Storage:="_Position_title", DbType:="NVarChar(50)")>  _
		Public Property Position_title() As String
			Get
				Return Me._Position_title
			End Get
			Set
				If (String.Equals(Me._Position_title, value) = false) Then
					Me._Position_title = value
				End If
			End Set
		End Property
	End Class
	
	<Table(Name:="audit.EmployeeUpdate")>  _
	Partial Public Class Audit_EmployeeUpdate
		
		Private _Changemaker_type As Byte
		
		Private _Change_when As Date
		
		Private _Change_remoteIP As String
		
		Private _EmployeeID As Short
		
		Private _Fullname As String
		
		Private _Phone_number As String
		
		Private _Skype_username As String
		
		Private _Email As String
		
		Private _Position_title As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Column(Name:="changemaker_type", Storage:="_Changemaker_type", DbType:="TinyInt NOT NULL")>  _
		Public Property Changemaker_type() As Byte
			Get
				Return Me._Changemaker_type
			End Get
			Set
				If ((Me._Changemaker_type = value)  _
							= false) Then
					Me._Changemaker_type = value
				End If
			End Set
		End Property
		
		<Column(Name:="change_when", Storage:="_Change_when", DbType:="DateTime NOT NULL")>  _
		Public Property Change_when() As Date
			Get
				Return Me._Change_when
			End Get
			Set
				If ((Me._Change_when = value)  _
							= false) Then
					Me._Change_when = value
				End If
			End Set
		End Property
		
		<Column(Name:="change_remoteIP", Storage:="_Change_remoteIP", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
		Public Property Change_remoteIP() As String
			Get
				Return Me._Change_remoteIP
			End Get
			Set
				If (String.Equals(Me._Change_remoteIP, value) = false) Then
					Me._Change_remoteIP = value
				End If
			End Set
		End Property
		
		<Column(Name:="employeeID", Storage:="_EmployeeID", DbType:="SmallInt NOT NULL")>  _
		Public Property EmployeeID() As Short
			Get
				Return Me._EmployeeID
			End Get
			Set
				If ((Me._EmployeeID = value)  _
							= false) Then
					Me._EmployeeID = value
				End If
			End Set
		End Property
		
		<Column(Name:="fullname", Storage:="_Fullname", DbType:="NVarChar(100)")>  _
		Public Property Fullname() As String
			Get
				Return Me._Fullname
			End Get
			Set
				If (String.Equals(Me._Fullname, value) = false) Then
					Me._Fullname = value
				End If
			End Set
		End Property
		
		<Column(Name:="phone_number", Storage:="_Phone_number", DbType:="VarChar(32)")>  _
		Public Property Phone_number() As String
			Get
				Return Me._Phone_number
			End Get
			Set
				If (String.Equals(Me._Phone_number, value) = false) Then
					Me._Phone_number = value
				End If
			End Set
		End Property
		
		<Column(Storage:="_Skype_username", DbType:="VarChar(64)")>  _
		Public Property Skype_username() As String
			Get
				Return Me._Skype_username
			End Get
			Set
				If (String.Equals(Me._Skype_username, value) = false) Then
					Me._Skype_username = value
				End If
			End Set
		End Property
		
		<Column(Name:="email", Storage:="_Email", DbType:="VarChar(100)")>  _
		Public Property Email() As String
			Get
				Return Me._Email
			End Get
			Set
				If (String.Equals(Me._Email, value) = false) Then
					Me._Email = value
				End If
			End Set
		End Property
		
		<Column(Name:="position_title", Storage:="_Position_title", DbType:="NVarChar(50)")>  _
		Public Property Position_title() As String
			Get
				Return Me._Position_title
			End Get
			Set
				If (String.Equals(Me._Position_title, value) = false) Then
					Me._Position_title = value
				End If
			End Set
		End Property
	End Class
	
	<Table(Name:="dbo.LOCATIONS")>  _
	Partial Public Class LOCATIONS
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Byte
		
		Private _Description As String
		
		Private _EMPLOYEES As EntitySet(Of EMPLOYEES)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Byte)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._EMPLOYEES = New EntitySet(Of EMPLOYEES)(AddressOf Me.attach_EMPLOYEES, AddressOf Me.detach_EMPLOYEES)
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
		Public Property ID() As Byte
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="description", Storage:="_Description", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Association(Name:="FK_EMPLOYEES_LOCATIONS", Storage:="_EMPLOYEES", ThisKey:="ID", OtherKey:="LocationID", DeleteRule:="NO ACTION")>  _
		Public Property EMPLOYEES() As EntitySet(Of EMPLOYEES)
			Get
				Return Me._EMPLOYEES
			End Get
			Set
				Me._EMPLOYEES.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_EMPLOYEES(ByVal entity As EMPLOYEES)
			Me.SendPropertyChanging
			entity.LOCATIONS = Me
		End Sub
		
		Private Sub detach_EMPLOYEES(ByVal entity As EMPLOYEES)
			Me.SendPropertyChanging
			entity.LOCATIONS = Nothing
		End Sub
	End Class
	
	<Table(Name:="dbo.MostRecentActivity")>  _
	Partial Public Class MostRecentActivity
		
		Private _EmployeeID As Short
		
		Private _LocationID As Byte
		
		Private _OrganizationID As System.Nullable(Of Byte)
		
		Private _When_punched As System.Nullable(Of Date)
		
		Private _Punchtype As System.Nullable(Of Byte)
		
		Private _Comment_text As String
		
		Private _Return_text As String
		
		Private _Punch_timestamp As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Column(Name:="employeeID", Storage:="_EmployeeID", DbType:="SmallInt NOT NULL")>  _
		Public Property EmployeeID() As Short
			Get
				Return Me._EmployeeID
			End Get
			Set
				If ((Me._EmployeeID = value)  _
							= false) Then
					Me._EmployeeID = value
				End If
			End Set
		End Property
		
		<Column(Name:="locationID", Storage:="_LocationID", DbType:="TinyInt NOT NULL")>  _
		Public Property LocationID() As Byte
			Get
				Return Me._LocationID
			End Get
			Set
				If ((Me._LocationID = value)  _
							= false) Then
					Me._LocationID = value
				End If
			End Set
		End Property
		
		<Column(Name:="organizationID", Storage:="_OrganizationID", DbType:="TinyInt")>  _
		Public Property OrganizationID() As System.Nullable(Of Byte)
			Get
				Return Me._OrganizationID
			End Get
			Set
				If (Me._OrganizationID.Equals(value) = false) Then
					Me._OrganizationID = value
				End If
			End Set
		End Property
		
		<Column(Name:="when_punched", Storage:="_When_punched", DbType:="DateTime")>  _
		Public Property When_punched() As System.Nullable(Of Date)
			Get
				Return Me._When_punched
			End Get
			Set
				If (Me._When_punched.Equals(value) = false) Then
					Me._When_punched = value
				End If
			End Set
		End Property
		
		<Column(Name:="punchtype", Storage:="_Punchtype", DbType:="TinyInt")>  _
		Public Property Punchtype() As System.Nullable(Of Byte)
			Get
				Return Me._Punchtype
			End Get
			Set
				If (Me._Punchtype.Equals(value) = false) Then
					Me._Punchtype = value
				End If
			End Set
		End Property
		
		<Column(Name:="comment_text", Storage:="_Comment_text", DbType:="NVarChar(65)")>  _
		Public Property Comment_text() As String
			Get
				Return Me._Comment_text
			End Get
			Set
				If (String.Equals(Me._Comment_text, value) = false) Then
					Me._Comment_text = value
				End If
			End Set
		End Property
		
		<Column(Name:="return_text", Storage:="_Return_text", DbType:="NVarChar(25)")>  _
		Public Property Return_text() As String
			Get
				Return Me._Return_text
			End Get
			Set
				If (String.Equals(Me._Return_text, value) = false) Then
					Me._Return_text = value
				End If
			End Set
		End Property
		
		<Column(Name:="punch_timestamp", Storage:="_Punch_timestamp", DbType:="VarChar(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Punch_timestamp() As String
			Get
				Return Me._Punch_timestamp
			End Get
			Set
				If (String.Equals(Me._Punch_timestamp, value) = false) Then
					Me._Punch_timestamp = value
				End If
			End Set
		End Property
	End Class
	
	<Table(Name:="dbo.ORGANIZATIONS")>  _
	Partial Public Class ORGANIZATIONS
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Byte
		
		Private _Description As String
		
		Private _Production_status As System.Nullable(Of Byte)
		
		Private _EMPLOYEES As EntitySet(Of EMPLOYEES)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Byte)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnProduction_statusChanging(value As System.Nullable(Of Byte))
    End Sub
    Partial Private Sub OnProduction_statusChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._EMPLOYEES = New EntitySet(Of EMPLOYEES)(AddressOf Me.attach_EMPLOYEES, AddressOf Me.detach_EMPLOYEES)
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
		Public Property ID() As Byte
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="description", Storage:="_Description", DbType:="VarChar(60) NOT NULL", CanBeNull:=false)>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Column(Name:="production_status", Storage:="_Production_status", DbType:="TinyInt")>  _
		Public Property Production_status() As System.Nullable(Of Byte)
			Get
				Return Me._Production_status
			End Get
			Set
				If (Me._Production_status.Equals(value) = false) Then
					Me.OnProduction_statusChanging(value)
					Me.SendPropertyChanging
					Me._Production_status = value
					Me.SendPropertyChanged("Production_status")
					Me.OnProduction_statusChanged
				End If
			End Set
		End Property
		
		<Association(Name:="FK_EMPLOYEES_ORGANIZATIONS", Storage:="_EMPLOYEES", ThisKey:="ID", OtherKey:="OrganizationID", DeleteRule:="NO ACTION")>  _
		Public Property EMPLOYEES() As EntitySet(Of EMPLOYEES)
			Get
				Return Me._EMPLOYEES
			End Get
			Set
				Me._EMPLOYEES.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_EMPLOYEES(ByVal entity As EMPLOYEES)
			Me.SendPropertyChanging
			entity.ORGANIZATIONS = Me
		End Sub
		
		Private Sub detach_EMPLOYEES(ByVal entity As EMPLOYEES)
			Me.SendPropertyChanging
			entity.ORGANIZATIONS = Nothing
		End Sub
	End Class
	
	<Table(Name:="dbo.PHOTOS")>  _
	Partial Public Class PHOTOS
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _EmployeeID As Short
		
		Private _Original_file As System.Data.Linq.Binary
		
		Private _Md5_original_file As String
		
		Private _EMPLOYEES As EntityRef(Of EMPLOYEES)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEmployeeIDChanging(value As Short)
    End Sub
    Partial Private Sub OnEmployeeIDChanged()
    End Sub
    Partial Private Sub OnOriginal_fileChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnOriginal_fileChanged()
    End Sub
    Partial Private Sub OnMd5_original_fileChanging(value As String)
    End Sub
    Partial Private Sub OnMd5_original_fileChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._EMPLOYEES = CType(Nothing, EntityRef(Of EMPLOYEES))
			OnCreated
		End Sub
		
		<Column(Name:="employeeID", Storage:="_EmployeeID", DbType:="SmallInt NOT NULL", IsPrimaryKey:=true)>  _
		Public Property EmployeeID() As Short
			Get
				Return Me._EmployeeID
			End Get
			Set
				If ((Me._EmployeeID = value)  _
							= false) Then
					Me.OnEmployeeIDChanging(value)
					Me.SendPropertyChanging
					Me._EmployeeID = value
					Me.SendPropertyChanged("EmployeeID")
					Me.OnEmployeeIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="original_file", Storage:="_Original_file", DbType:="Image NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
		Public Property Original_file() As System.Data.Linq.Binary
			Get
				Return Me._Original_file
			End Get
			Set
				If (Object.Equals(Me._Original_file, value) = false) Then
					Me.OnOriginal_fileChanging(value)
					Me.SendPropertyChanging
					Me._Original_file = value
					Me.SendPropertyChanged("Original_file")
					Me.OnOriginal_fileChanged
				End If
			End Set
		End Property
		
		<Column(Name:="md5_original_file", Storage:="_Md5_original_file", DbType:="VarChar(32) NOT NULL", CanBeNull:=false)>  _
		Public Property Md5_original_file() As String
			Get
				Return Me._Md5_original_file
			End Get
			Set
				If (String.Equals(Me._Md5_original_file, value) = false) Then
					Me.OnMd5_original_fileChanging(value)
					Me.SendPropertyChanging
					Me._Md5_original_file = value
					Me.SendPropertyChanged("Md5_original_file")
					Me.OnMd5_original_fileChanged
				End If
			End Set
		End Property
		
		<Association(Name:="FK_JPEGS_EMPLOYEES", Storage:="_EMPLOYEES", ThisKey:="EmployeeID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property EMPLOYEES() As EMPLOYEES
			Get
				Return Me._EMPLOYEES.Entity
			End Get
			Set
				Dim previousValue As EMPLOYEES = Me._EMPLOYEES.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._EMPLOYEES.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._EMPLOYEES.Entity = Nothing
						previousValue.PHOTOS = Nothing
					End If
					Me._EMPLOYEES.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.PHOTOS = Me
						Me._EmployeeID = value.ID
					Else
						Me._EmployeeID = CType(Nothing, Short)
					End If
					Me.SendPropertyChanged("EMPLOYEES")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="dbo.PUNCHES")>  _
	Partial Public Class PUNCHES
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _EmployeeID As Short
		
		Private _When_punched_utc As Date
		
		Private _Utc_hours_offset As Short
		
		Private _Punchtype As Byte
		
		Private _IP_address As String
		
		Private _Comment_text As String
		
		Private _Return_text As String
		
		Private _Ticks_timestamp As Long
		
		Private _EMPLOYEES As EntityRef(Of EMPLOYEES)
		
		Private _PUNCHTYPES As EntityRef(Of PUNCHTYPES)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEmployeeIDChanging(value As Short)
    End Sub
    Partial Private Sub OnEmployeeIDChanged()
    End Sub
    Partial Private Sub OnWhen_punched_utcChanging(value As Date)
    End Sub
    Partial Private Sub OnWhen_punched_utcChanged()
    End Sub
    Partial Private Sub OnUtc_hours_offsetChanging(value As Short)
    End Sub
    Partial Private Sub OnUtc_hours_offsetChanged()
    End Sub
    Partial Private Sub OnPunchtypeChanging(value As Byte)
    End Sub
    Partial Private Sub OnPunchtypeChanged()
    End Sub
    Partial Private Sub OnIP_addressChanging(value As String)
    End Sub
    Partial Private Sub OnIP_addressChanged()
    End Sub
    Partial Private Sub OnComment_textChanging(value As String)
    End Sub
    Partial Private Sub OnComment_textChanged()
    End Sub
    Partial Private Sub OnReturn_textChanging(value As String)
    End Sub
    Partial Private Sub OnReturn_textChanged()
    End Sub
    Partial Private Sub OnTicks_timestampChanging(value As Long)
    End Sub
    Partial Private Sub OnTicks_timestampChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._EMPLOYEES = CType(Nothing, EntityRef(Of EMPLOYEES))
			Me._PUNCHTYPES = CType(Nothing, EntityRef(Of PUNCHTYPES))
			OnCreated
		End Sub
		
		<Column(Name:="employeeID", Storage:="_EmployeeID", DbType:="SmallInt NOT NULL")>  _
		Public Property EmployeeID() As Short
			Get
				Return Me._EmployeeID
			End Get
			Set
				If ((Me._EmployeeID = value)  _
							= false) Then
					Me.OnEmployeeIDChanging(value)
					Me.SendPropertyChanging
					Me._EmployeeID = value
					Me.SendPropertyChanged("EmployeeID")
					Me.OnEmployeeIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="when_punched_utc", Storage:="_When_punched_utc", DbType:="DateTime NOT NULL")>  _
		Public Property When_punched_utc() As Date
			Get
				Return Me._When_punched_utc
			End Get
			Set
				If ((Me._When_punched_utc = value)  _
							= false) Then
					Me.OnWhen_punched_utcChanging(value)
					Me.SendPropertyChanging
					Me._When_punched_utc = value
					Me.SendPropertyChanged("When_punched_utc")
					Me.OnWhen_punched_utcChanged
				End If
			End Set
		End Property
		
		<Column(Name:="utc_hours_offset", Storage:="_Utc_hours_offset", DbType:="SmallInt NOT NULL")>  _
		Public Property Utc_hours_offset() As Short
			Get
				Return Me._Utc_hours_offset
			End Get
			Set
				If ((Me._Utc_hours_offset = value)  _
							= false) Then
					Me.OnUtc_hours_offsetChanging(value)
					Me.SendPropertyChanging
					Me._Utc_hours_offset = value
					Me.SendPropertyChanged("Utc_hours_offset")
					Me.OnUtc_hours_offsetChanged
				End If
			End Set
		End Property
		
		<Column(Name:="punchtype", Storage:="_Punchtype", DbType:="TinyInt NOT NULL")>  _
		Public Property Punchtype() As Byte
			Get
				Return Me._Punchtype
			End Get
			Set
				If ((Me._Punchtype = value)  _
							= false) Then
					Me.OnPunchtypeChanging(value)
					Me.SendPropertyChanging
					Me._Punchtype = value
					Me.SendPropertyChanged("Punchtype")
					Me.OnPunchtypeChanged
				End If
			End Set
		End Property
		
		<Column(Storage:="_IP_address", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
		Public Property IP_address() As String
			Get
				Return Me._IP_address
			End Get
			Set
				If (String.Equals(Me._IP_address, value) = false) Then
					Me.OnIP_addressChanging(value)
					Me.SendPropertyChanging
					Me._IP_address = value
					Me.SendPropertyChanged("IP_address")
					Me.OnIP_addressChanged
				End If
			End Set
		End Property
		
		<Column(Name:="comment_text", Storage:="_Comment_text", DbType:="NVarChar(65)")>  _
		Public Property Comment_text() As String
			Get
				Return Me._Comment_text
			End Get
			Set
				If (String.Equals(Me._Comment_text, value) = false) Then
					Me.OnComment_textChanging(value)
					Me.SendPropertyChanging
					Me._Comment_text = value
					Me.SendPropertyChanged("Comment_text")
					Me.OnComment_textChanged
				End If
			End Set
		End Property
		
		<Column(Name:="return_text", Storage:="_Return_text", DbType:="NVarChar(25)")>  _
		Public Property Return_text() As String
			Get
				Return Me._Return_text
			End Get
			Set
				If (String.Equals(Me._Return_text, value) = false) Then
					Me.OnReturn_textChanging(value)
					Me.SendPropertyChanging
					Me._Return_text = value
					Me.SendPropertyChanged("Return_text")
					Me.OnReturn_textChanged
				End If
			End Set
		End Property
		
		<Column(Name:="ticks_timestamp", Storage:="_Ticks_timestamp", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
		Public Property Ticks_timestamp() As Long
			Get
				Return Me._Ticks_timestamp
			End Get
			Set
				If ((Me._Ticks_timestamp = value)  _
							= false) Then
					Me.OnTicks_timestampChanging(value)
					Me.SendPropertyChanging
					Me._Ticks_timestamp = value
					Me.SendPropertyChanged("Ticks_timestamp")
					Me.OnTicks_timestampChanged
				End If
			End Set
		End Property
		
		<Association(Name:="FK_PUNCHES_EMPLOYEES", Storage:="_EMPLOYEES", ThisKey:="EmployeeID", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property EMPLOYEES() As EMPLOYEES
			Get
				Return Me._EMPLOYEES.Entity
			End Get
			Set
				Dim previousValue As EMPLOYEES = Me._EMPLOYEES.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._EMPLOYEES.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._EMPLOYEES.Entity = Nothing
						previousValue.PUNCHES.Remove(Me)
					End If
					Me._EMPLOYEES.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.PUNCHES.Add(Me)
						Me._EmployeeID = value.ID
					Else
						Me._EmployeeID = CType(Nothing, Short)
					End If
					Me.SendPropertyChanged("EMPLOYEES")
				End If
			End Set
		End Property
		
		<Association(Name:="FK_PUNCHES_PUNCHTYPES", Storage:="_PUNCHTYPES", ThisKey:="Punchtype", OtherKey:="ID", IsForeignKey:=true)>  _
		Public Property PUNCHTYPES() As PUNCHTYPES
			Get
				Return Me._PUNCHTYPES.Entity
			End Get
			Set
				Dim previousValue As PUNCHTYPES = Me._PUNCHTYPES.Entity
				If ((Object.Equals(previousValue, value) = false)  _
							OrElse (Me._PUNCHTYPES.HasLoadedOrAssignedValue = false)) Then
					Me.SendPropertyChanging
					If ((previousValue Is Nothing)  _
								= false) Then
						Me._PUNCHTYPES.Entity = Nothing
						previousValue.PUNCHES.Remove(Me)
					End If
					Me._PUNCHTYPES.Entity = value
					If ((value Is Nothing)  _
								= false) Then
						value.PUNCHES.Add(Me)
						Me._Punchtype = value.ID
					Else
						Me._Punchtype = CType(Nothing, Byte)
					End If
					Me.SendPropertyChanged("PUNCHTYPES")
				End If
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class
	
	<Table(Name:="audit.PUNCHES_DELETED")>  _
	Partial Public Class Audit_PUNCHES_DELETED
		
		Private _When_deleted As Date
		
		Private _EmployeeID As Short
		
		Private _When_punched_utc As Date
		
		Private _Utc_hours_offset As Short
		
		Private _Punchtype As Byte
		
		Private _IP_address As String
		
		Private _Comment_text As String
		
		Private _Return_text As String
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Column(Name:="when_deleted", Storage:="_When_deleted", DbType:="DateTime NOT NULL")>  _
		Public Property When_deleted() As Date
			Get
				Return Me._When_deleted
			End Get
			Set
				If ((Me._When_deleted = value)  _
							= false) Then
					Me._When_deleted = value
				End If
			End Set
		End Property
		
		<Column(Name:="employeeID", Storage:="_EmployeeID", DbType:="SmallInt NOT NULL")>  _
		Public Property EmployeeID() As Short
			Get
				Return Me._EmployeeID
			End Get
			Set
				If ((Me._EmployeeID = value)  _
							= false) Then
					Me._EmployeeID = value
				End If
			End Set
		End Property
		
		<Column(Name:="when_punched_utc", Storage:="_When_punched_utc", DbType:="DateTime NOT NULL")>  _
		Public Property When_punched_utc() As Date
			Get
				Return Me._When_punched_utc
			End Get
			Set
				If ((Me._When_punched_utc = value)  _
							= false) Then
					Me._When_punched_utc = value
				End If
			End Set
		End Property
		
		<Column(Name:="utc_hours_offset", Storage:="_Utc_hours_offset", DbType:="SmallInt NOT NULL")>  _
		Public Property Utc_hours_offset() As Short
			Get
				Return Me._Utc_hours_offset
			End Get
			Set
				If ((Me._Utc_hours_offset = value)  _
							= false) Then
					Me._Utc_hours_offset = value
				End If
			End Set
		End Property
		
		<Column(Name:="punchtype", Storage:="_Punchtype", DbType:="TinyInt NOT NULL")>  _
		Public Property Punchtype() As Byte
			Get
				Return Me._Punchtype
			End Get
			Set
				If ((Me._Punchtype = value)  _
							= false) Then
					Me._Punchtype = value
				End If
			End Set
		End Property
		
		<Column(Storage:="_IP_address", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
		Public Property IP_address() As String
			Get
				Return Me._IP_address
			End Get
			Set
				If (String.Equals(Me._IP_address, value) = false) Then
					Me._IP_address = value
				End If
			End Set
		End Property
		
		<Column(Name:="comment_text", Storage:="_Comment_text", DbType:="NVarChar(250)")>  _
		Public Property Comment_text() As String
			Get
				Return Me._Comment_text
			End Get
			Set
				If (String.Equals(Me._Comment_text, value) = false) Then
					Me._Comment_text = value
				End If
			End Set
		End Property
		
		<Column(Name:="return_text", Storage:="_Return_text", DbType:="NVarChar(50)")>  _
		Public Property Return_text() As String
			Get
				Return Me._Return_text
			End Get
			Set
				If (String.Equals(Me._Return_text, value) = false) Then
					Me._Return_text = value
				End If
			End Set
		End Property
	End Class
	
	<Table(Name:="dbo.PUNCHTYPES")>  _
	Partial Public Class PUNCHTYPES
		Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
		
		Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
		
		Private _ID As Byte
		
		Private _Description As String
		
		Private _PUNCHES As EntitySet(Of PUNCHES)
		
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Byte)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
		
		Public Sub New()
			MyBase.New
			Me._PUNCHES = New EntitySet(Of PUNCHES)(AddressOf Me.attach_PUNCHES, AddressOf Me.detach_PUNCHES)
			OnCreated
		End Sub
		
		<Column(Storage:="_ID", DbType:="TinyInt NOT NULL", IsPrimaryKey:=true)>  _
		Public Property ID() As Byte
			Get
				Return Me._ID
			End Get
			Set
				If ((Me._ID = value)  _
							= false) Then
					Me.OnIDChanging(value)
					Me.SendPropertyChanging
					Me._ID = value
					Me.SendPropertyChanged("ID")
					Me.OnIDChanged
				End If
			End Set
		End Property
		
		<Column(Name:="description", Storage:="_Description", DbType:="VarChar(32) NOT NULL", CanBeNull:=false)>  _
		Public Property Description() As String
			Get
				Return Me._Description
			End Get
			Set
				If (String.Equals(Me._Description, value) = false) Then
					Me.OnDescriptionChanging(value)
					Me.SendPropertyChanging
					Me._Description = value
					Me.SendPropertyChanged("Description")
					Me.OnDescriptionChanged
				End If
			End Set
		End Property
		
		<Association(Name:="FK_PUNCHES_PUNCHTYPES", Storage:="_PUNCHES", ThisKey:="ID", OtherKey:="Punchtype", DeleteRule:="NO ACTION")>  _
		Public Property PUNCHES() As EntitySet(Of PUNCHES)
			Get
				Return Me._PUNCHES
			End Get
			Set
				Me._PUNCHES.Assign(value)
			End Set
		End Property
		
		Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
		
		Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
		
		Protected Overridable Sub SendPropertyChanging()
			If ((Me.PropertyChangingEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub
		
		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
			If ((Me.PropertyChangedEvent Is Nothing)  _
						= false) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
		
		Private Sub attach_PUNCHES(ByVal entity As PUNCHES)
			Me.SendPropertyChanging
			entity.PUNCHTYPES = Me
		End Sub
		
		Private Sub detach_PUNCHES(ByVal entity As PUNCHES)
			Me.SendPropertyChanging
			entity.PUNCHTYPES = Nothing
		End Sub
	End Class
	
	Partial Public Class Sp_helpdiagramdefinitionResult
		
		Private _Version As System.Nullable(Of Integer)
		
		Private _Definition As System.Data.Linq.Binary
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Column(Name:="version", Storage:="_Version", DbType:="Int")>  _
		Public Property Version() As System.Nullable(Of Integer)
			Get
				Return Me._Version
			End Get
			Set
				If (Me._Version.Equals(value) = false) Then
					Me._Version = value
				End If
			End Set
		End Property
		
		<Column(Name:="definition", Storage:="_Definition", DbType:="VarBinary(MAX)", CanBeNull:=true)>  _
		Public Property Definition() As System.Data.Linq.Binary
			Get
				Return Me._Definition
			End Get
			Set
				If (Object.Equals(Me._Definition, value) = false) Then
					Me._Definition = value
				End If
			End Set
		End Property
	End Class
	
	Partial Public Class Sp_helpdiagramsResult
		
		Private _Database As String
		
		Private _Name As String
		
		Private _ID As System.Nullable(Of Integer)
		
		Private _Owner As String
		
		Private _OwnerID As System.Nullable(Of Integer)
		
		Public Sub New()
			MyBase.New
		End Sub
		
		<Column(Storage:="_Database", DbType:="NVarChar(128)")>  _
		Public Property Database() As String
			Get
				Return Me._Database
			End Get
			Set
				If (String.Equals(Me._Database, value) = false) Then
					Me._Database = value
				End If
			End Set
		End Property
		
		<Column(Storage:="_Name", DbType:="NVarChar(128)")>  _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set
				If (String.Equals(Me._Name, value) = false) Then
					Me._Name = value
				End If
			End Set
		End Property
		
		<Column(Storage:="_ID", DbType:="Int")>  _
		Public Property ID() As System.Nullable(Of Integer)
			Get
				Return Me._ID
			End Get
			Set
				If (Me._ID.Equals(value) = false) Then
					Me._ID = value
				End If
			End Set
		End Property
		
		<Column(Storage:="_Owner", DbType:="NVarChar(128)")>  _
		Public Property Owner() As String
			Get
				Return Me._Owner
			End Get
			Set
				If (String.Equals(Me._Owner, value) = false) Then
					Me._Owner = value
				End If
			End Set
		End Property
		
		<Column(Storage:="_OwnerID", DbType:="Int")>  _
		Public Property OwnerID() As System.Nullable(Of Integer)
			Get
				Return Me._OwnerID
			End Get
			Set
				If (Me._OwnerID.Equals(value) = false) Then
					Me._OwnerID = value
				End If
			End Set
		End Property
	End Class
End Namespace
